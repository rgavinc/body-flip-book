{"version":3,"sources":["Title.js","hoc-functions.js","Carousel.js","Menu.js","Media.js","About.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["StyledLink","styled","Link","Title","to","getWindowDimensions","window","width","innerWidth","height","innerHeight","WrappedComponent","Wrapper","div","torso","original","process","pants","createImageGallery","isMobileSized","items","slideInterval","showPlayButton","showFullscreenButton","showThumbnails","array","sort","Math","random","withWindowDimensions","props","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","windowWidth","windowHeight","isDesktopSized","Menu","IconLink","a","Media","href","size","P","p","About","Contact","GlobalStyle","createGlobalStyle","InnerWrapper","App","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0de8036.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst StyledLink = styled(Link)`\n  font-size: 2.5rem;\n  text-decoration: none;\n  margin-bottom: 1rem;\n  font-weight: bold;\n  color: #912f40;\n  @media screen and (min-width: 1000px) {\n    font-size: 4rem;\n  }\n`;\n\nconst Title = () => <StyledLink to=\"/\">Gavin Robertson</StyledLink>;\n\nexport default Title;\n","import React, { useState, useEffect } from \"react\";\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return { width, height };\n};\n\nexport const withWindowDimensions = WrappedComponent => props => {\n  const [windowDimensions, setWindowDimensions] = useState(\n    getWindowDimensions()\n  );\n\n  useEffect(() => {\n    const handleResize = () => setWindowDimensions(getWindowDimensions());\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <WrappedComponent\n      {...props}\n      windowWidth={windowDimensions.width}\n      windowHeight={windowDimensions.height}\n      isMobileSized={windowDimensions.width <= 600}\n      isDesktopSized={windowDimensions.width >= 1000}\n    />\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport ImageGallery from \"react-image-gallery\";\nimport styled from \"styled-components\";\nimport { withWindowDimensions } from \"./hoc-functions\";\nimport \"./Carousel.scss\";\n\nconst Wrapper = styled.div`\n  margin-bottom: 2rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  &[class] .image-gallery-slide img {\n    width: 100%;\n    max-height: 20vh;\n    max-width: 50vw;\n    @media screen and (min-width: 1000px) {\n      max-height: 30vh;\n    }\n  }\n`;\n\nconst torso = [\n  {\n    original: `${process.env.PUBLIC_URL}/body-images/torso1.png`\n  },\n  {\n    original: `${process.env.PUBLIC_URL}/body-images/torso2.png`\n  },\n  {\n    original: `${process.env.PUBLIC_URL}/body-images/torso3.png`\n  }\n];\n\nconst pants = [\n  {\n    original: `${process.env.PUBLIC_URL}/body-images/pants1.png`\n  },\n  {\n    original: `${process.env.PUBLIC_URL}/body-images/pants2.png`\n  },\n  {\n    original: `${process.env.PUBLIC_URL}/body-images/pants3.png`\n  }\n];\n\nconst shuffle = array => array.sort(() => Math.random() - 0.5);\n\nconst createImageGallery = (isMobileSized, items) => (\n  <ImageGallery\n    slideInterval={4000}\n    showPlayButton={false}\n    showFullscreenButton={false}\n    showThumbnails={false}\n    items={shuffle(items)}\n  />\n);\n\nconst Carousel = ({ isMobileSized }) => {\n  return (\n    <Wrapper>\n      {createImageGallery(isMobileSized, torso)}\n      {createImageGallery(isMobileSized, pants)}\n    </Wrapper>\n  );\n};\n\nexport default withWindowDimensions(Carousel);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst Wrapper = styled.div`\n  color: #912f40;\n`;\nconst StyledLink = styled(Link)`\n  margin: 0 2rem;\n  color: #912f40;\n  font-size: 2rem;\n  text-decoration: none;\n  &:hover {\n    color: #702632;\n  }\n`;\n\nconst Menu = () => (\n  <Wrapper>\n    <StyledLink to=\"/about\">About</StyledLink>\n    {/* ‚óè\n    <StyledLink to=\"/contact\">Contact</StyledLink> */}\n  </Wrapper>\n);\n\nexport default Menu;\n","import React from \"react\";\nimport { FaInstagram, FaGithub, FaLinkedin, FaEnvelope } from \"react-icons/fa\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div``;\nconst IconLink = styled.a`\n  transition: all 0.2s ease-out;\n  margin: 0 1rem;\n  color: #912f40;\n  &:hover {\n    color: #702632;\n  }\n  @media screen and (min-width: 1000px) {\n    margin: 0 2rem;\n  }\n`;\n\nconst Media = () => (\n  <Wrapper>\n    <IconLink href=\"https://www.instagram.com/gavinrob92\">\n      <FaInstagram size=\"2rem\" />\n    </IconLink>\n    <IconLink href=\"https://github.com/rgavinc\">\n      <FaGithub size=\"2rem\" />\n    </IconLink>\n    <IconLink href=\"https://www.linkedin.com/in/gavinrob\">\n      <FaLinkedin size=\"2rem\" />\n    </IconLink>\n    <IconLink href=\"mailto:gavinrob92@gmail.com\">\n      <FaEnvelope size=\"2rem\" />\n    </IconLink>\n  </Wrapper>\n);\n\nexport default Media;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst P = styled.p`\n  font-size: 1.5rem;\n  margin: 3rem;\n  max-width: 500px;\n  color: #912f40;\n  @media screen and (min-width: 800px) {\n    font-size: 2rem;\n  }\n`;\n\nconst About = () => (\n  <P>\n    Hi, I am a senior full stack web developer currently living in the Salt Lake\n    City area. I love my wife, music, hiking, cycling, and programming.\n  </P>\n);\n\nexport default About;\n","import React from \"react\";\n\nconst Contact = () => <p>Contact</p>;\n\nexport default Contact;\n","import React from \"react\";\nimport Title from \"./Title\";\nimport Carousel from \"./Carousel\";\nimport Menu from \"./Menu\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport \"./App.css\";\nimport Media from \"./Media\";\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport About from \"./About\";\nimport Contact from \"./Contact\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: \"Reenie Beanie\", cursive;\n  }\n`;\n\nconst P = styled.p`\n  color: #912f40;\n  margin: 1rem;\n`;\n\nconst Wrapper = styled.div`\n  margin: auto;\n  padding: 1rem;\n  height: 80vh;\n  max-width: 1500px;\n  display: flex;\n  background-color: #fffffa;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n\n  @media screen and (min-width: 1000px) {\n    flex-direction: row;\n    padding: 5rem;\n  }\n`;\n\nconst InnerWrapper = styled.div`\n  display: flex;\n  background-color: #fffffa;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nfunction App() {\n  return (\n    <Router>\n      <Wrapper>\n        <GlobalStyle />\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/\">\n            <Carousel />\n          </Route>\n        </Switch>\n        <InnerWrapper>\n          <Title />\n          <Menu />\n          <P>________________________________</P>\n          <Media />\n        </InnerWrapper>\n      </Wrapper>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}